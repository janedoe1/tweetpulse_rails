<div id="twitter-user-graph">
  <%= render :partial => "shared/breadcrumbs", :locals => {:twitter_user => @twitter_user, :tweet => nil} %>
  <%= row do %>
    <%= databox("Tweets from @#{@twitter_user.handle} matching search '#{@twitter_user.label}'", :class => 'span12') do %>
      <% unless @twitter_user.tweets.blank? %>
        <small class="graph-metadata"><%= @twitter_user.tweet_range %></small>
      <% end %>
      <small class="pull-right btn btn-mini" style="padding-top:3px;"><i class='icon-refresh'></i> <%= link_to "Refresh", "#", :id => 'refresh-results' %></small>
      <small class="pull-right btn btn-mini" style="padding-top:3px; margin-right:3px;">
        <i class='icon-arrow-down'></i>
        <%= link_to "Export", twitter_user_path(@twitter_user, format:'csv') %>
      </small>
      <div id="chart" style="width:100%; height:570px;">
        <% if @twitter_user.tweets.blank? %>
          <p style="padding-top:200px;text-align:center;">
            There are no tweets matching this user.
            <small><a href="#" class="no-results" rel="tooltip" data-html="true" title="While our user search has years of data, our tweet search is limited by Twitter's Search API constraints. <br/><br/>This may cause some searches to have user results but no tweet results." data-placement="right" data-trigger='click'>Why?</a></small>
          </p>
        <% end %>
      </div>
    <% end %>
  <% end %>
</div>
<style type="text/css">

circle.node {
  cursor: pointer;
  stroke: #000;
  stroke-width: .5px;
}

line.link {
  fill: none;
  stroke: #9ecae1;
  stroke-width: 1.5px;
}
circle.node title {
  pointer-events: none;
  font: 10px sans-serif;
}

circle.node:hover {
  color:red;
}

text {
  font: 12px sans-serif;
  pointer-events: none;
  letter-spacing:1px;
}

text.shadow {
  stroke: #000;
  stroke-width: 3px;
  stroke-opacity: 1;
}
    </style>
  </head>
  <body>
    
<script type="text/javascript">

$(document).ready(function() {
  var tweet_count = <%= @twitter_user.tweets.count %>;
  if(tweet_count == 0) {
    refreshResults();
  } else {
    drawChart();
  }
  $('#refresh-results').click(function(){
    refreshResults();
  });
})

function refreshResults() {
  $('#loading-overlay').show();
  $.ajax({
      url: '/twitter_users/' + <%= @twitter_user.id.to_s %> + '/refresh',
      success: function(responseData) {
        $('#twitter-user-graph').html(responseData);
        $('#loading-overlay').hide();
      },
      error: function(result) {
        $('.no-results').tooltip();
        defaultAjaxErrorHandler(result, true); 
      }
  });
}

function drawChart() {
  var width = $('#chart').width(),
      height = $('#chart').height();
      
  var color = d3.scale.category20();

  var force = d3.layout.force()
      .charge(-120)
      .linkDistance(200)
      .size([width, height]);

  var svg = d3.select("#chart").append("svg")
      .attr("width", width)
      .attr("height", height);
  
  url = "/twitter_users/" + <%= @twitter_user.id.to_s %> + ".json"
  
  d3.json(url, function(json) {
    var nodes = json.nodes
    force
        .nodes(json.nodes)
        .links(json.links)
        .start();

    var link = svg.selectAll("line.link")
        .data(json.links)
        .enter().append("line")
        .attr("class", "link")
        .style("stroke-width", function(d) { return d.size; })
        .style("stroke", 'black');

    var node = svg.selectAll("circle.node")
        .data(json.nodes)
        .enter().append("circle")
        .attr("class", "node")
        .attr("r", function(d) { return d.size; })
        .attr("title", function(d) { return d.name; })
        .attr("detail", function(d) { return d.tweet_tooltip; })
        .attr("color", function(d) { return d.color; })
        .style("fill", function(d) { return d.color; })
        .call(force.drag);
    

    var text = svg.append("svg:g").selectAll("g")
        .data(force.nodes())
        .enter().append("svg:g");

    // A copy of the text with a thick white stroke for legibility.
    text.append("svg:text")
        .attr("x", function(d) { return d.size; })
        .attr("y", ".31em")
        .attr("class", "shadow")
        .text(function(d) { return d.name; });

    text.append("svg:text")
        .attr("x", function(d) { return d.size; })
        .attr("y", ".31em")
        .style("fill", 'white')
        .text(function(d) { return d.name; });
        
    force.on("tick", function() {
      nodes[0].x = width / 2;
      nodes[0].y = height / 2;
      link.attr("x1", function(d) { return d.source.x; })
          .attr("y1", function(d) { return d.source.y; })
          .attr("x2", function(d) { return d.target.x; })
          .attr("y2", function(d) { return d.target.y; });

      node.attr("cx", function(d) { return d.x; })
          .attr("cy", function(d) { return d.y; });
          
      text.attr("transform", function(d) {
          return "translate(" + d.x + "," + d.y + ")";
      });
    });
    
    $("svg .node").each(function(index) {
      if (index != 0) {
        $(this).qtip({
           content: {
                 text: '<img src="/assets/loading.gif" alt="Loading..."/>',
                 url: $(this).attr('detail'),
                 method: 'get'
                 // title: {
                 //                   text: $(this).attr('title'), // Give the tooltip a title using each elements text
                 //                   button: 'Close' // Show a close link in the title
                 //                 }
           },
           position: {
              corner: {
                 target: 'topLeft',
                 tooltip: 'bottomLeft'
              },
              adjust: {
                screen: true,
                x: $(this).attr('size')
              }
           },
           show: { 
             when: 'click',
             solo: true // Only show one tooltip at a time
           },
           hide: 'unfocus',
           style: { 
                 tip: true,
                 padding: 5,
                 color: '#333',
                 textAlign: 'left',
                 border: {
                    radius: 5,
                    color: $(this).attr('color')
                 },
                 name: 'light', // Inherit the rest of the attributes from the preset dark style
                 width: 500
           }
        });
      }
      
    });
  });
}
</script>