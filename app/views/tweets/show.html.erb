<%- model_class = Tweet -%>
<%= databox("Tweet from @#{@tweet.twitter_user.handle} matching '#{@tweet.search.label}'") do %>

<div id="chart" style="width:100%; height:550px;"></div>

<% end %>

<style type="text/css">

circle.node {
  cursor: pointer;
  stroke: #000;
  stroke-width: .5px;
}

line.link {
  fill: none;
  stroke: #9ecae1;
  stroke-width: 1.5px;
}
circle.node title {
  pointer-events: none;
  font: 10px sans-serif;
}

circle.node:hover {
  color:red;
}

text {
  font: 12px sans-serif;
  pointer-events: none;
  letter-spacing:1px;
}

text.shadow {
  stroke: #000;
  stroke-width: 3px;
  stroke-opacity: 1;
}
    </style>
  </head>
  <body>
    
    <script type="text/javascript">
var width = 960,     // svg width
    height = 600,     // svg height
    dr = 4,      // default point radius
    off = 15,    // cluster hull offset
    expand = {}, // expanded clusters
    data, net, force, hullg, hull, linkg, link, nodeg, node;

var curve = d3.svg.line()
    .interpolate("cardinal-closed")
    .tension(.85);

var fill = d3.scale.category20();

function noop() { return false; }

function nodeid(n) {
  return n.size ? "_g_"+n.group : n.name;
}

function linkid(l) {
  var u = nodeid(l.source),
      v = nodeid(l.target);
  return u<v ? u+"|"+v : v+"|"+u;
}

function getGroup(n) { return n.group; }

// constructs the network to visualize
function network(data, prev, index, expand) {
  expand = expand || {};
  var gm = {},    // group map
      nm = {},    // node map
      lm = {},    // link map
      gn = {},    // previous group nodes
      gc = {},    // previous group centroids
      nodes = [], // output nodes
      links = []; // output links

  // process previous nodes for reuse or centroid calculation
  if (prev) {
    prev.nodes.forEach(function(n) {
      var i = index(n), o;
      if (n.size > 0) {
        gn[i] = n;
        n.size = 0;
      } else {
        o = gc[i] || (gc[i] = {x:0,y:0,count:0});
        o.x += n.x;
        o.y += n.y;
        o.count += 1;
      }
    });
  }

  // determine nodes
  for (var k=0; k<data.nodes.length; ++k) {
    var n = data.nodes[k],
        i = index(n);

    if(i == undefined) expand[i] = true;

    if (expand[i]) {
      // the node should be directly visible
      nm[n.name] = nodes.length;
      nodes.push(n);
      if (gn[i]) {
        // place new nodes at cluster location (plus jitter)
        n.x = gn[i].x;
        n.y = gn[i].y;
      }
    } else {
      // the node is part of a collapsed cluster
      var l = gm[i] || (gm[i]=gn[i]) || (gm[i]={group:i, size:0, nodes:[]});
      if (l.size == 0) {
        // if new cluster, add to set and position at centroid of leaf nodes
        nm[i] = nodes.length;
        nodes.push(l);
        if (gc[i]) {
          l.x = gc[i].x / gc[i].count;
          l.y = gc[i].y / gc[i].count;
        }
      }
      l.size += 1;
      l.nodes.push(n);
    }
  }

  // determine links
  for (k=0; k<data.links.length; ++k) {
    var e = data.links[k],
        u = index(e.source),
        v = index(e.target);
    u = expand[u] ? nm[e.source.name] : nm[u];
    v = expand[v] ? nm[e.target.name] : nm[v];
    var i = (u<v ? u+"|"+v : v+"|"+u),
        l = lm[i] || (lm[i] = {source:u, target:v, size:e.size});
    l.size += e.size;
    l.length = e.length;
  }
  for (i in lm) { links.push(lm[i]); }

  return {nodes: nodes, links: links};
}

function convexHulls(nodes, index, offset) {
  var hulls = {};

  // create point sets
  for (var k=0; k<nodes.length; k++) {
    var n = nodes[k];
    if (n.size) continue;
    var i = index(n),
        l = hulls[i] || (hulls[i] = []);
    l.push([n.x-offset, n.y-offset]);
    l.push([n.x-offset, n.y+offset]);
    l.push([n.x+offset, n.y-offset]);
    l.push([n.x+offset, n.y+offset]);
  }

  // create convex hulls
  var hulls = [];
  for (i in hulls) {
    hulls.push({group: i, path: d3.geom.hull(hulls[i])});
  }

  return hulls;
}

function drawCluster(d) {
  return curve(d.path); // 0.8
}
  
  url = "/tweets/" + <%= @tweet.id.to_s %> + ".json"
  
  console.log(url);
  var body = d3.select("#chart");

  var vis = body.append("svg")
   .attr("width", width)
   .attr("height", height);

  d3.json(url, function(json) {
    data = json;
    for (var i=0; i<data.links.length; ++i) {
      o = data.links[i];
      o.source = data.nodes[o.source];
      o.target = data.nodes[o.target];
    }

    hullg = vis.append("g");
    linkg = vis.append("g");
    nodeg = vis.append("g");

    init();

    vis.attr("opacity", 1e-6)
      .transition()
        .duration(1000)
        .attr("opacity", 1);
   });

function init() {
  if (force) force.stop();

  net = network(data, net, getGroup, expand);

  force = d3.layout.force()
      .nodes(net.nodes)
      .links(net.links)
      .size([width, height])
      .linkDistance(function(d) { return d.length;})
      .charge(-2000)
      .start();

  hullg.selectAll("path.hull").remove();
  hull = hullg.selectAll("path.hull")
      .data(convexHulls(net.nodes, getGroup, off))
    .enter().append("path")
      .attr("class", "hull")
      .attr("d", drawCluster)
      .style("fill", function(d) { return fill(d.group); })
      .on("dblclick", function(d) { expand[d.group] = false; init(); });

  link = linkg.selectAll("line.link").data(net.links, linkid);
  link.exit().remove();
  link.enter().append("line")
      .attr("class", "link")
      .attr("x1", function(d) { return d.source.x; })
      .attr("y1", function(d) { return d.source.y; })
      .attr("x2", function(d) { return d.target.x; })
      .attr("y2", function(d) { return d.target.y; })
      .style("stroke-width", function(d) { return d.size || 1; })
      .style("stroke", 'black');

  node = nodeg.selectAll("circle.node").data(net.nodes, nodeid);
  node.exit().remove();
  node.enter().append("circle")
      .attr("class", function(d) { return "node" + (d.size?"":" leaf"); })
      //.attr("r", function(d) { return d.size ? d.size + dr : dr+1; })
      .attr("r", function(d) { return d.size; })
      .attr("cx", function(d) { return d.x; })
      .attr("cy", function(d) { return d.y; })
      //.style("fill", function(d) { return fill(d.group); })
      .style("fill", function(d) { return d.color; })
      .attr("title", function(d) { return d.name; })
      .attr("detail", function(d) { return d.tweet_tooltip; })
      .attr("color", function(d) { return d.color; })
      .on("dblclick", function(d) {
        if (d.size) { expand[d.group] = true; init(); }
      });

  node.call(force.drag);

  var text = vis.append("vis:g").selectAll("g")
        .data(force.nodes())
        .enter().append("vis:g");

    // A copy of the text with a thick white stroke for legibility.
    text.append("vis:text")
        .attr("x", function(d) { return d.size; })
        .attr("y", ".31em")
        .attr("class", "shadow")
        .text(function(d) { return d.name; });

    text.append("vis:text")
        .attr("x", function(d) { return d.size; })
        .attr("y", ".31em")
        .style("fill", 'white')
        .text(function(d) { return d.name; });

  force.on("tick", function() {
    if (!hull.empty()) {
      hull.data(convexHulls(net.nodes, getGroup, off))
          .attr("d", drawCluster);
    }

    link.attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; });

    node.attr("cx", function(d) { return d.x; })
        .attr("cy", function(d) { return d.y; });

    text.attr("transform", function(d) {
          return "translate(" + d.x + "," + d.y + ")";
      });
  });
}
/*    var nodes = json.nodes
    force
        .nodes(json.nodes)
        .links(json.links)
        .start();

    var link = svg.selectAll("line.link")
        .data(json.links)
        .enter().append("line")
        .attr("class", "link")
        .style("stroke-width", function(d) { return d.size; })
        .style("stroke", 'black');

    var node = svg.selectAll("circle.node")
        .data(json.nodes)
        .enter().append("circle")
        .attr("class", "node")
        .attr("r", function(d) { return d.size; })
        .attr("title", function(d) { return d.name; })
        .attr("detail", function(d) { return d.tweet_tooltip; })
        .attr("color", function(d) { return d.color; })
        .style("fill", function(d) { return d.color; })
        .call(force.drag);

    var text = svg.append("svg:g").selectAll("g")
        .data(force.nodes())
        .enter().append("svg:g");

    // A copy of the text with a thick white stroke for legibility.
    text.append("svg:text")
        .attr("x", function(d) { return d.size; })
        .attr("y", ".31em")
        .attr("class", "shadow")
        .text(function(d) { return d.name; });

    text.append("svg:text")
        .attr("x", function(d) { return d.size; })
        .attr("y", ".31em")
        .style("fill", 'white')
        .text(function(d) { return d.name; });
        
    force.on("tick", function() {
      nodes[0].x = width / 2;
      nodes[0].y = height / 2;
      link.attr("x1", function(d) { return d.source.x; })
          .attr("y1", function(d) { return d.source.y; })
          .attr("x2", function(d) { return d.target.x; })
          .attr("y2", function(d) { return d.target.y; });

      node.attr("cx", function(d) { return d.x; })
          .attr("cy", function(d) { return d.y; });
          
      text.attr("transform", function(d) {
          return "translate(" + d.x + "," + d.y + ")";
      });
    });*/
    
    $("svg .node").each(function(index) {
      if (index != 0) {
        $(this).qtip({
           content: {
                 text: '<img src="/assets/loading.gif" alt="Loading..."/>',
                 url: $(this).attr('detail'),
                 method: 'get'
                 // title: {
                 //                   text: $(this).attr('title'), // Give the tooltip a title using each elements text
                 //                   button: 'Close' // Show a close link in the title
                 //                 }
           },
           position: {
              corner: {
                 target: 'topLeft',
                 tooltip: 'bottomLeft'
              },
              adjust: {
                screen: true,
                x: $(this).attr('size')
              }
           },
           show: { 
             when: 'click',
             solo: true // Only show one tooltip at a time
           },
           hide: 'unfocus',
           style: { 
                 tip: true,
                 padding: 5,
                 color: '#333',
                 textAlign: 'left',
                 border: {
                    radius: 5,
                    color: $(this).attr('color')
                 },
                 name: 'light', // Inherit the rest of the attributes from the preset dark style
                 width: 500
           }
        });
      }
      
    })
    


//})


    </script>